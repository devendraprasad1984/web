{"version":3,"sources":["F:/angularTests/sampleApp/Angular-Forms/src/$_lazy_route_resource lazy","F:/angularTests/sampleApp/Angular-Forms/src/app/app-routing.module.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/app.component.html","F:/angularTests/sampleApp/Angular-Forms/src/app/app.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/app.module.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/basicForm/basicForm.component.html","F:/angularTests/sampleApp/Angular-Forms/src/app/basicForm/basicForm.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/component-styles.css","F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/controlValueAccessor.component.html","F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/controlValueAccessor.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/phone-textbox.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/required-textbox.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/reactiveForm/reactiveForm.component.html","F:/angularTests/sampleApp/Angular-Forms/src/app/reactiveForm/reactiveForm.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/shared/hero.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/shared/validation.service.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/starterReactiveForm/starterReactiveForm.component.html","F:/angularTests/sampleApp/Angular-Forms/src/app/starterReactiveForm/starterReactiveForm.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/starterTemplateForm/starterTemplateForm.component.html","F:/angularTests/sampleApp/Angular-Forms/src/app/starterTemplateForm/starterTemplateForm.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/templateForm/templateForm.component.html","F:/angularTests/sampleApp/Angular-Forms/src/app/templateForm/templateForm.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/app/updateOn/updateOn.component.html","F:/angularTests/sampleApp/Angular-Forms/src/app/updateOn/updateOn.component.ts","F:/angularTests/sampleApp/Angular-Forms/src/environments/environment.ts","F:/angularTests/sampleApp/Angular-Forms/src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/$$_lazy_route_resource lazy\n// module id = ../../../../../src/$$_lazy_route_resource lazy recursive\n// module chunks = main","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { BasicFormComponent } from './basicForm/basicForm.component';\r\nimport { TemplateFormComponent } from './templateForm/templateForm.component';\r\nimport { ReactiveFormComponent } from './reactiveForm/reactiveForm.component';\r\nimport { StarterTemplateFormComponent } from './starterTemplateForm/starterTemplateForm.component';\r\nimport { StarterReactiveFormComponent } from './starterReactiveForm/starterReactiveForm.component';\r\nimport { UpdateOnComponent } from './updateOn/updateOn.component';\r\nimport { ControlValueAccessorComponent } from './controlValueAccessor/controlValueAccessor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch:'full', redirectTo: '/startertemplateform' },\r\n  { path: 'ng1', pathMatch:'full', redirectTo: '/startertemplateform' },\r\n  { path: 'startertemplateform', component: StarterTemplateFormComponent    },\r\n  { path: 'starterreactiveform', component: StarterReactiveFormComponent },\r\n  { path: 'basicform',  component: BasicFormComponent },\r\n  { path: 'templateform',  component: TemplateFormComponent },\r\n  { path: 'reactiveform',     component: ReactiveFormComponent  },\r\n  { path: 'updateon', component: UpdateOnComponent },\r\n  { path: 'controlvalueaccessor', component: ControlValueAccessorComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forRoot(routes) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule {\r\n  static components = [\r\n    StarterTemplateFormComponent, StarterReactiveFormComponent,\r\n    BasicFormComponent, TemplateFormComponent, ReactiveFormComponent,\r\n    ControlValueAccessorComponent, UpdateOnComponent\r\n  ];\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/app-routing.module.ts","module.exports = \"<div class=\\\"container\\\">\\r\\n \\r\\n  <nav class=\\\"navbar navbar-default\\\">\\r\\n    <div class=\\\"navbar-header\\\">\\r\\n      <a href=\\\"#/\\\"><img src=\\\"assets/angular.png\\\" class=\\\"logo\\\" /></a>\\r\\n    </div>\\r\\n    <ul class=\\\"nav navbar-nav nav-pills\\\">\\r\\n      <li routerLinkActive=\\\"active\\\">\\r\\n        <a routerLink=\\\"/startertemplateform\\\">Starter Template Form</a>\\r\\n      </li>\\r\\n      <li routerLinkActive=\\\"active\\\">\\r\\n        <a routerLink=\\\"/starterreactiveform\\\">Starter Reactive Form</a>\\r\\n      </li>\\r\\n      <li routerLinkActive=\\\"active\\\">\\r\\n        <a routerLink=\\\"/basicform\\\">Basic Template Form</a>\\r\\n      </li>\\r\\n      <li routerLinkActive=\\\"active\\\">\\r\\n        <a routerLink=\\\"/templateform\\\">Template Form</a>\\r\\n      </li>\\r\\n      <li routerLinkActive=\\\"active\\\">\\r\\n        <a routerLink=\\\"/reactiveform\\\">Reactive Form</a>\\r\\n      </li>\\r\\n      <li routerLinkActive=\\\"active\\\">\\r\\n        <a routerLink=\\\"/controlvalueaccessor\\\">Custom Components</a>\\r\\n      </li>\\r\\n      <li routerLinkActive=\\\"active\\\">\\r\\n        <a routerLink=\\\"/updateon\\\">Update On</a>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </nav>\\r\\n  \\r\\n  <router-outlet></router-outlet>\\r\\n  \\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\r\n\r\n@Component({ \r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent { \r\n  \r\n  constructor() {\r\n\r\n  }\r\n  \r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/app.component.ts","import { NgModule }      from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent }  from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { RequiredTextboxComponent } from './controlValueAccessor/required-textbox.component';\r\nimport { PhoneTextboxComponent } from './controlValueAccessor/phone-textbox.component';\r\n\r\n@NgModule({\r\n  imports:      [ BrowserModule, FormsModule, ReactiveFormsModule, AppRoutingModule ],\r\n  declarations: [ AppComponent, AppRoutingModule.components, RequiredTextboxComponent, PhoneTextboxComponent ],\r\n  bootstrap:    [ AppComponent ]\r\n})\r\nexport class AppModule { }\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/app.module.ts","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div *ngIf=\\\"!submitted\\\">\\r\\n    <h1>Basic Template Driven Form</h1>\\r\\n    <form #heroForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(heroForm.value)\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"name\\\">Name</label>\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" ngModel #name=\\\"ngModel\\\" required>\\r\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"name.valid || name.pristine\\\">Name is required</div>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"alterEgo\\\">Alter Ego</label>\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"alterEgo\\\" ngModel #alterEgo=\\\"ngModel\\\" required>\\r\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"alterEgo.valid || alterEgo.pristine\\\">Alter Ego is required</div>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"power\\\">Hero Power</label>\\r\\n        <select class=\\\"form-control\\\" name=\\\"power\\\" ngModel #power=\\\"ngModel\\\" required>\\r\\n          <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{ p }}</option>\\r\\n        </select>\\r\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"power.valid || power.pristine\\\">Power is required</div>\\r\\n      </div>\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button>\\r\\n    </form>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"submitted\\\">\\r\\n    <h2>You submitted the following:</h2>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-2\\\">Name</div>\\r\\n      <div class=\\\"col-md-10 pull-left\\\">{{ form.name }}</div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-2\\\">Alter Ego</div>\\r\\n      <div class=\\\"col-md-10 pull-left\\\">{{ form.alterEgo }}</div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-2\\\">Power</div>\\r\\n      <div class=\\\"col-md-10 pull-left\\\">{{ form.power }}</div>\\r\\n    </div>\\r\\n    <br />\\r\\n    Raw output from form.value:\\r\\n    <br />\\r\\n    {{ form | json }}\\r\\n    <br /><br />\\r\\n    <button class=\\\"btn btn-default\\\" (click)=\\\"submitted=false\\\">Edit</button>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/app/basicForm/basicForm.component.html\n// module id = ../../../../../src/app/basicForm/basicForm.component.html\n// module chunks = main","import { Component, OnInit, Host } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'basic-template-driven-form',\r\n  templateUrl: './basicForm.component.html'\r\n})\r\nexport class BasicFormComponent implements OnInit {\r\n  form: any;\r\n  powers: string[];\r\n  submitted: boolean = false;\r\n  \r\n  constructor() { }\r\n  \r\n  ngOnInit() {\r\n    this.powers = ['Really Smart', 'Turbulent Breeze', \r\n                'Super Hot', 'Weather Changer'];\r\n  }\r\n\r\n  onSubmit(form: any)  {\r\n    this.submitted = true;\r\n    this.form = form;\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/basicForm/basicForm.component.ts","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \":host(.ng-invalid) input {\\r\\n    border-left: 5px solid #a94442;\\r\\n  }\\r\\n  \\r\\n:host(.ng-valid) input {\\r\\n    border-left: 5px solid #42A948;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/component-styles.css\n// module id = ../../../../../src/app/controlValueAccessor/component-styles.css\n// module chunks = main","module.exports = \"<h1>Customer Edit</h1>\\r\\n<form [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Name</label>\\r\\n        <required-textbox formControlName=\\\"name\\\"></required-textbox>\\r\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"customerForm.controls.name.invalid\\\">First Name is required!</div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>Phone</label>\\r\\n        <phone-textbox formControlName=\\\"phone\\\"></phone-textbox>\\r\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"customerForm.controls.phone.errors?.required\\\">Enter a phone number!</div>\\r\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"customerForm.controls.phone.errors?.phone\\\">Enter a valid phone number!</div>\\r\\n    </div>\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-default\\\" [disabled]=\\\"customerForm.invalid\\\">Submit</button>\\r\\n    <br /><br />\\r\\n    {{ message }}\\r\\n    <br /><br />\\r\\n    Valid: {{ customerForm.valid}}\\r\\n    <br />\\r\\n    Pristine: {{ customerForm.pristine }}\\r\\n    <br />\\r\\n    Touched: {{ customerForm.touched }}\\r\\n</form>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/controlValueAccessor.component.html\n// module id = ../../../../../src/app/controlValueAccessor/controlValueAccessor.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'control-value-accessor',\r\n    templateUrl: 'controlValueAccessor.component.html'\r\n})\r\nexport class ControlValueAccessorComponent implements OnInit {\r\n\r\n    customerForm: FormGroup;\r\n    customer: any;\r\n    message: string;\r\n    constructor(private formBuilder: FormBuilder) { }\r\n\r\n    ngOnInit() { \r\n        this.customer = {\r\n            firstName: 'Tina Reactive',\r\n            phone: '123-123-1234'\r\n        };\r\n\r\n        this.customerForm = this.formBuilder.group({\r\n            name: [this.customer.firstName ],\r\n            phone: [this.customer.phone ]\r\n        });\r\n    }\r\n\r\n    submit() {\r\n        this.message = 'You entered: ' + \r\n                        this.customerForm.controls.name.value + ' ' + \r\n                        this.customerForm.controls.phone.value;\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/controlValueAccessor.component.ts","import { Component, Output, EventEmitter, forwardRef, OnChanges } from \"@angular/core\";\r\nimport { NgControl, ControlValueAccessor, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormControl, Validators } from \"@angular/forms\";\r\nimport { AbstractControl } from \"@angular/forms/src/model\";\r\nimport { ValidationErrors } from \"@angular/forms/src/directives/validators\";\r\n\r\n@Component({ \r\n    selector: 'phone-textbox', \r\n    template: `\r\n        <input type=\"text\" class=\"form-control\" [value]=\"value\" \r\n               (input)=\"onChange($event.target.value)\" \r\n               (blur)=\"onTouched($event)\" [disabled]=\"disabled\" />\r\n    `,\r\n    styleUrls: ['./component-styles.css'],\r\n    providers: [\r\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PhoneTextboxComponent), multi: true },\r\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => PhoneTextboxComponent), multi: true }\r\n    ]\r\n})\r\nexport class PhoneTextboxComponent implements ControlValueAccessor {\r\n    private onChange = (_: any) => { };\r\n    private onTouched = (_: any) => { };\r\n    private onValidate = (_: any) => { };\r\n    value: string;\r\n    disabled = false;\r\n\r\n    constructor() {  }\r\n\r\n    writeValue(value: any) { this.value = value; }\r\n\r\n    registerOnChange(fn: (value: any) => void) { this.onChange = fn; }\r\n\r\n    registerOnTouched(fn: any) { this.onTouched = fn; }    \r\n\r\n    setDisabledState(disabled: boolean) { this.disabled = disabled; }\r\n\r\n    validate(ctrl: AbstractControl) : ValidationErrors { \r\n        let requiredErrors = Validators.required(ctrl);\r\n        let patternErrors = Validators.pattern(/^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/)(ctrl);\r\n        if (!requiredErrors && !patternErrors) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n          required: requiredErrors,\r\n          phone: patternErrors\r\n        };\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/phone-textbox.component.ts","import { Component, Output, EventEmitter, forwardRef } from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, AbstractControl, Validators, NG_VALIDATORS } from \"@angular/forms\";\r\n\r\n@Component({ \r\n    selector: 'required-textbox', \r\n    template: `\r\n        <input type=\"text\" class=\"form-control\" [value]=\"value\" \r\n               (input)=\"onChange($event.target.value)\" \r\n               (blur)=\"onTouched($event)\" [disabled]=\"disabled\" />\r\n    `,\r\n    styleUrls: ['./component-styles.css'],\r\n    providers: [\r\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RequiredTextboxComponent), multi: true },\r\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => RequiredTextboxComponent), multi: true }\r\n    ]\r\n})\r\nexport class RequiredTextboxComponent implements ControlValueAccessor {\r\n    private onChange = (_: any) => { };\r\n    private onTouched = (_: any) => { };\r\n    value: string;\r\n    disabled = false;\r\n\r\n    constructor() {  }\r\n\r\n    writeValue(value: any) { this.value = value; }\r\n\r\n    registerOnChange(fn: (value: any) => void) { this.onChange = fn; }\r\n\r\n    registerOnTouched(fn: any) { this.onTouched = fn; }\r\n\r\n    setDisabledState(disabled: boolean) { this.disabled = disabled; }\r\n\r\n    validate(ctrl: AbstractControl) { return Validators.required(ctrl); }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/controlValueAccessor/required-textbox.component.ts","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div *ngIf=\\\"!submitted\\\">\\r\\n        <h1>Reactive Form</h1>\\r\\n        <form [formGroup]=\\\"heroForm\\\" (ngSubmit)=\\\"onSubmit(heroForm)\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" />\\r\\n                <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.name.valid\\\">Name is required</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"alterEgo\\\">Alter Ego</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"alterEgo\\\" />\\r\\n                <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.alterEgo.valid\\\">Alter Ego is required</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Hero Email</label>\\r\\n                <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\r\\n                <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.email.valid\\\">Email is required and must be a valid email pattern</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"power\\\">Hero Power</label>\\r\\n                <select class=\\\"form-control\\\" formControlName=\\\"power\\\">\\r\\n                  <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{p}}</option>\\r\\n                </select>\\r\\n                <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.power.valid\\\">Power is required</div>\\r\\n            </div>\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button> \\r\\n        </form>  \\r\\n    </div>\\r\\n                                \\r\\n    <div *ngIf=\\\"submitted\\\">\\r\\n        <h2>You submitted the following:</h2>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-2\\\">Name</div>\\r\\n            <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.name }}</div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-2\\\">Alter Ego</div>\\r\\n            <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.alterEgo }}</div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-2\\\">Hero Email</div>\\r\\n            <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.email }}</div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-2\\\">Power</div>\\r\\n            <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.power }}</div>\\r\\n        </div>\\r\\n        <br />\\r\\n        <button class=\\\"btn btn-default\\\" (click)=\\\"submitted=false\\\">Edit</button>\\r\\n    </div>    \\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/app/reactiveForm/reactiveForm.component.html\n// module id = ../../../../../src/app/reactiveForm/reactiveForm.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { ValidationService } from '../shared/validation.service';\r\nimport { Hero } from '../shared/hero';\r\n\r\n@Component({\r\n  selector: 'reactive-driven-form',\r\n  templateUrl: './reactiveForm.component.html'\r\n})\r\nexport class ReactiveFormComponent implements OnInit {\r\n  heroForm: FormGroup;\r\n  model: Hero; \r\n  submittedModel: Hero; \r\n  powers: string[];\r\n  submitted: boolean = false;\r\n  \r\n  constructor(private formBuilder: FormBuilder) { }\r\n  \r\n  ngOnInit() {\r\n      this.model = new Hero(18, 'Dr IQ', 'Really Smart', 'Chuck Overstreet', 'iq@superhero.com');\r\n      \r\n      this.powers = ['Really Smart', 'Super Flexible', \r\n                     'Hypersound', 'Weather Changer'];                     \r\n                     \r\n      this.heroForm = this.formBuilder.group({\r\n        name:     [this.model.name, Validators.required],\r\n        alterEgo: [this.model.alterEgo, Validators.required],\r\n        email:    [this.model.email, [Validators.required, ValidationService.emailValidator]],\r\n        power:    [this.model.power, Validators.required]\r\n      });\r\n  }\r\n\r\n  onSubmit({ value, valid }: { value: Hero, valid: boolean }) {\r\n    this.submitted = true;\r\n    this.submittedModel = value;\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/reactiveForm/reactiveForm.component.ts","export class Hero {\r\n\r\n  constructor(\r\n    public id?: number,\r\n    public name?: string,\r\n    public power?: string,\r\n    public alterEgo?: string,\r\n    public email?: string) {\r\n\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/shared/hero.ts","//Original version created by Cory Rylan: https://coryrylan.com/blog/angular-2-form-builder-and-validation-management\r\nimport { AbstractControl } from '@angular/forms';\r\n\r\nexport class ValidationService {\r\n     \r\n    static getValidatorErrorMessage(code: string) {\r\n        let config = {\r\n            'required': 'Required',\r\n            'invalidCreditCard': 'Is invalid credit card number',\r\n            'invalidEmailAddress': 'Invalid email address',\r\n            'invalidPassword': 'Invalid password. Password must be at least 6 characters long, and contain a number.'\r\n        };\r\n        return config[code];\r\n    }\r\n\r\n    static creditCardValidator(control: AbstractControl) {\r\n        // Visa, MasterCard, American Express, Diners Club, Discover, JCB\r\n        if (control.value.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\r\n            return null;\r\n        } else {\r\n            return { 'invalidCreditCard': true };\r\n        }\r\n    }\r\n     \r\n    static emailValidator(control: AbstractControl) {\r\n        // RFC 2822 compliant regex\r\n        if (control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\r\n            return null;\r\n        } else {\r\n            return { 'invalidEmailAddress': true };\r\n        }\r\n    }\r\n     \r\n    static passwordValidator(control: AbstractControl) {\r\n        // {6,100}           - Assert password is between 6 and 100 characters\r\n        // (?=.*[0-9])       - Assert a string has at least one number\r\n        if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\r\n            return null;\r\n        } else {\r\n            return { 'invalidPassword': true };\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/shared/validation.service.ts","module.exports = \"<h1>Customer Edit</h1>\\r\\n<form [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"onSubmit(customerForm)\\\">\\r\\n    First Name:\\r\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"firstName\\\" />\\r\\n    <br />\\r\\n    <span *ngIf=\\\"customerForm.controls.firstName.invalid\\\">First Name is required!</span>\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-default\\\" [disabled]=\\\"customerForm.invalid\\\">Submit</button>\\r\\n    <br />\\r\\n    {{ message }}\\r\\n    <br />\\r\\n    Valid: {{ customerForm.valid}}\\r\\n    <br />\\r\\n    Pristine: {{ customerForm.pristine }}\\r\\n    <br />\\r\\n    Touched: {{ customerForm.touched }}\\r\\n</form>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/app/starterReactiveForm/starterReactiveForm.component.html\n// module id = ../../../../../src/app/starterReactiveForm/starterReactiveForm.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'starter-reactive-form',\r\n    templateUrl: './starterReactiveForm.component.html'\r\n})\r\nexport class StarterReactiveFormComponent implements OnInit {\r\n    customerForm: FormGroup;\r\n    customer: any;\r\n    message: string;\r\n    constructor(private formBuilder: FormBuilder) { }\r\n\r\n    ngOnInit() { \r\n        this.customer = {\r\n            firstName: 'Tina Reactive'\r\n        };\r\n\r\n        this.customerForm = this.formBuilder.group({\r\n            firstName: [this.customer.firstName, Validators.required ]\r\n        });\r\n    }\r\n\r\n    onSubmit(form: FormGroup) {\r\n        this.message = 'You typed: ' + form.controls.firstName.value;\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/starterReactiveForm/starterReactiveForm.component.ts","module.exports = \"<h1>Customer Edit</h1>\\r\\n<form #starterForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n    First Name: <input type=\\\"text\\\" class=\\\"form-control\\\"\\r\\n                       name=\\\"firstName\\\" \\r\\n                       #firstName=\\\"ngModel\\\"\\r\\n                       [(ngModel)]=\\\"customer.firstName\\\"\\r\\n                       required />\\r\\n    <br />\\r\\n    <span *ngIf=\\\"!firstName.valid\\\">First Name is required!</span>\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-default\\\" [disabled]=\\\"!starterForm.valid\\\">Submit</button>\\r\\n    <br /><br />\\r\\n    {{ message }}\\r\\n    <br />\\r\\n    Valid: {{ firstName.valid}}\\r\\n    <br />\\r\\n    Pristine: {{ firstName.pristine }}\\r\\n    <br />\\r\\n    Touched: {{ firstName.touched }}\\r\\n</form>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/app/starterTemplateForm/starterTemplateForm.component.html\n// module id = ../../../../../src/app/starterTemplateForm/starterTemplateForm.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'starter-template-form',\r\n    templateUrl: './starterTemplateForm.component.html'\r\n})\r\nexport class StarterTemplateFormComponent implements OnInit {\r\n    customer: any;\r\n    message: string;\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() { \r\n        this.customer = {\r\n            firstName: 'Fred Template'\r\n        };\r\n    }\r\n\r\n    onSubmit() {\r\n        this.message = 'You typed: ' + this.customer.firstName;\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/starterTemplateForm/starterTemplateForm.component.ts","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div *ngIf=\\\"!submitted\\\">\\r\\n    <h1>Template Driven Form</h1>\\r\\n    <form (ngSubmit)=\\\"onSubmit()\\\" #heroForm=\\\"ngForm\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"name\\\">Name</label>\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" #name=\\\"ngModel\\\" [(ngModel)]=\\\"model.name\\\" required>\\r\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"name.valid\\\">Name is required</div>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"alterEgo\\\">Alter Ego</label>\\r\\n        <!-- \\r\\n          Example of what things look like without [(ngModel)]=\\\"model.alterEgo\\\" \\r\\n          \\r\\n          <input type=\\\"text\\\" name=\\\"alterEgo\\\" [ngModel]=\\\"model.alterEgo\\\" (ngModelChange)=\\\"model.alterEgo=$event\\\" required>\\r\\n        -->\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"alterEgo\\\" #alterEgo=\\\"ngModel\\\" [(ngModel)]=\\\"model.alterEgo\\\" required>\\r\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"alterEgo.valid\\\">Alter Ego is required</div>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"power\\\">Hero Power</label>\\r\\n        <select class=\\\"form-control\\\" name=\\\"power\\\" #power=\\\"ngModel\\\" [(ngModel)]=\\\"model.power\\\" required>\\r\\n          <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{ p }}</option>\\r\\n        </select>\\r\\n        <div class=\\\"alert alert-danger\\\" [hidden]=\\\"power.valid\\\">Power is required</div>\\r\\n      </div>\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button>\\r\\n    </form>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"submitted\\\">\\r\\n    <h2>You submitted the following:</h2>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-2\\\">Name</div>\\r\\n      <div class=\\\"col-md-10 pull-left\\\">{{ model.name }}</div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-2\\\">Alter Ego</div>\\r\\n      <div class=\\\"col-md-10 pull-left\\\">{{ model.alterEgo }}</div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-2\\\">Power</div>\\r\\n      <div class=\\\"col-md-10 pull-left\\\">{{ model.power }}</div>\\r\\n    </div>\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-default\\\" (click)=\\\"submitted=false\\\">Edit</button>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/app/templateForm/templateForm.component.html\n// module id = ../../../../../src/app/templateForm/templateForm.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\n\r\n//import { ShowError } from './showError.component';\r\nimport { Hero } from '../shared/hero';\r\n\r\n@Component({\r\n  selector: 'template-driven-form',\r\n  templateUrl: './templateForm.component.html'\r\n})\r\nexport class TemplateFormComponent implements OnInit {\r\n  model: Hero;  \r\n  powers: string[];\r\n  submitted: boolean = false;\r\n  \r\n  constructor() { }\r\n  \r\n  ngOnInit() {\r\n      this.model = new Hero(18, 'Tornado', 'Turbulent Breeze', 'Willie Wind');\r\n\r\n      this.powers = ['Really Smart', 'Turbulent Breeze', \r\n                     'Super Hot', 'Weather Changer'];\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/templateForm/templateForm.component.ts","module.exports = \"<div class=\\\"container\\\">\\r\\n    <!-- Template Form -->\\r\\n    <div *ngIf=\\\"!templateSubmitted\\\">\\r\\n      <h1>Using updateOn with Template Forms</h1>\\r\\n      <!--Can add this if you want nothing to update until the form is submitted: [ngModelOptions]=\\\"{updateOn: 'submit'} -->\\r\\n      <form (ngSubmit)=\\\"submit()\\\" #heroForm=\\\"ngForm\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"name\\\">Name (updateOn applied)</label>\\r\\n          <!-- for updateOn you can pass 'blue' or 'submit' -->\\r\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" #name=\\\"ngModel\\\" \\r\\n                [(ngModel)]=\\\"model.name\\\" \\r\\n                [ngModelOptions]=\\\"{updateOn: 'blur'}\\\" required> \\r\\n          <div class=\\\"alert alert-danger\\\" [hidden]=\\\"name.valid\\\">Name is required</div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"alterEgo\\\">Alter Ego</label>\\r\\n          <!-- \\r\\n            Example of what things look like without [(ngModel)]=\\\"model.alterEgo\\\" \\r\\n            \\r\\n            <input type=\\\"text\\\" name=\\\"alterEgo\\\" [ngModel]=\\\"model.alterEgo\\\" (ngModelChange)=\\\"model.alterEgo=$event\\\" required>\\r\\n          -->\\r\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"alterEgo\\\" #alterEgo=\\\"ngModel\\\" \\r\\n                [(ngModel)]=\\\"model.alterEgo\\\" required> \\r\\n          <div class=\\\"alert alert-danger\\\" [hidden]=\\\"alterEgo.valid\\\">Alter Ego is required</div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"power\\\">Hero Power</label>\\r\\n          <select class=\\\"form-control\\\" name=\\\"power\\\" \\r\\n                  #power=\\\"ngModel\\\" [(ngModel)]=\\\"model.power\\\" required>\\r\\n            <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{ p }}</option>\\r\\n          </select>\\r\\n          <div class=\\\"alert alert-danger\\\" [hidden]=\\\"power.valid\\\">Power is required</div>\\r\\n        </div>\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button>\\r\\n        <br /><br />\\r\\n        <pre>\\r\\n          {{ heroForm.value | json }}\\r\\n        </pre>\\r\\n      </form>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"templateSubmitted\\\">\\r\\n      <h2>You submitted the following:</h2>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-2\\\">Name</div>\\r\\n        <div class=\\\"col-md-10 pull-left\\\">{{ model.name }}</div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-2\\\">Alter Ego</div>\\r\\n        <div class=\\\"col-md-10 pull-left\\\">{{ model.alterEgo }}</div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-2\\\">Power</div>\\r\\n        <div class=\\\"col-md-10 pull-left\\\">{{ model.power }}</div>\\r\\n      </div>\\r\\n      <br />\\r\\n      <button class=\\\"btn btn-default\\\" (click)=\\\"templateSubmitted=false\\\">Edit</button>\\r\\n    </div>\\r\\n    <br />\\r\\n\\r\\n    <!-- Reactive Form -->\\r\\n    <div *ngIf=\\\"!reactiveSubmitted\\\">\\r\\n      <h1>Using updateOn with Reactive Forms</h1>\\r\\n      <form [formGroup]=\\\"heroForm\\\" (ngSubmit)=\\\"reactiveSubmit()\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">Name (updateOn applied)</label>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" /> \\r\\n              <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.name.valid\\\">Name is required</div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"alterEgo\\\">Alter Ego</label>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"alterEgo\\\" /> \\r\\n              <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.alterEgo.valid\\\">Alter Ego is required</div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">Hero Email</label>\\r\\n              <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" /> {{ heroForm.controls.email.value }}\\r\\n              <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.email.valid\\\">Email is required and must be a valid email pattern</div>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"power\\\">Hero Power</label>\\r\\n              <select class=\\\"form-control\\\" formControlName=\\\"power\\\">\\r\\n                <option *ngFor=\\\"let p of powers\\\" [value]=\\\"p\\\">{{p}}</option>\\r\\n              </select>\\r\\n              <div class=\\\"alert alert-danger\\\" [hidden]=\\\"heroForm.controls.power.valid\\\">Power is required</div>\\r\\n          </div>\\r\\n          <button type=\\\"submit\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"!heroForm.valid\\\">Submit</button> \\r\\n          <br /><br />\\r\\n          <pre>\\r\\n            {{ heroForm.value | json }}\\r\\n          </pre>\\r\\n      </form>  \\r\\n  </div>\\r\\n                              \\r\\n  <div *ngIf=\\\"reactiveSubmitted\\\">\\r\\n      <h2>You submitted the following:</h2>\\r\\n      <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-md-2\\\">Name</div>\\r\\n          <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.name }}</div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-md-2\\\">Alter Ego</div>\\r\\n          <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.alterEgo }}</div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-md-2\\\">Hero Email</div>\\r\\n          <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.email }}</div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-md-2\\\">Power</div>\\r\\n          <div class=\\\"col-md-10 pull-left\\\">{{ submittedModel.power }}</div>\\r\\n      </div>\\r\\n      <br />\\r\\n      <button class=\\\"btn btn-default\\\" (click)=\\\"reactiveSubmitted=false\\\">Edit</button>\\r\\n  </div>  \\r\\n  </div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/angularTests/sampleApp/Angular-Forms/src/app/updateOn/updateOn.component.html\n// module id = ../../../../../src/app/updateOn/updateOn.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { Hero } from '../shared/hero';\r\nimport { Validators, FormGroup, FormBuilder, FormControl } from '@angular/forms';\r\nimport { ValidationService } from '../shared/validation.service';\r\n\r\n@Component({\r\n    selector: 'update-on-form',\r\n    templateUrl: './updateOn.component.html'\r\n})\r\nexport class UpdateOnComponent implements OnInit {\r\n    model: Hero;  \r\n    submittedModel: Hero; \r\n    heroForm: FormGroup;\r\n    powers: string[];\r\n    templateSubmitted = false;\r\n    reactiveSubmitted = false;\r\n    \r\n    constructor(private formBuilder: FormBuilder) { }\r\n    \r\n    ngOnInit() {\r\n        this.model = new Hero(18, 'Dr IQ', 'Really Smart', 'Chuck Overstreet', 'iq@superhero.com');\r\n  \r\n        this.powers = ['Really Smart', 'Turbulent Breeze', \r\n                       'Super Hot', 'Weather Changer'];\r\n\r\n        //This currently doesn't work when using FormBuilder to create a FormGroup that has updateOn\r\n        //https://github.com/angular/angular/issues/19163\r\n        // this.heroForm = this.formBuilder.group({\r\n        //     //Can individually add updateOn to FormControls\r\n        //     //name:     [this.model.name, { validators: Validators.required, updateOn: 'blue' }],\r\n        //     name:     [this.model.name, Validators.required ],\r\n        //     alterEgo: [this.model.alterEgo, Validators.required],\r\n        //     email:    [this.model.email, [Validators.required, ValidationService.emailValidator]],\r\n        //     power:    [this.model.power, Validators.required]\r\n        // }, { updateOn: 'blur' });\r\n\r\n        this.heroForm = new FormGroup({\r\n            //Can individually add updateOn to FormControls\r\n            //name:   new FormControl(this.model.name, { validators: Validators.required, updateOn: 'blue' }),\r\n            name:     new FormControl(this.model.name, Validators.required ),\r\n            alterEgo: new FormControl(this.model.alterEgo, Validators.required),\r\n            email:    new FormControl(this.model.email, { validators: [Validators.required, ValidationService.emailValidator] }),\r\n            power:    new FormControl(this.model.power, Validators.required)\r\n        }, { updateOn: 'blur' });\r\n    }\r\n\r\n    updateOnForAll() {\r\n        //this.heroForm.setValue({ updateOn: 'blue'});\r\n    }\r\n  \r\n    submit() {\r\n      this.templateSubmitted = true;\r\n    }\r\n\r\n    reactiveSubmit() {\r\n        this.reactiveSubmitted = true;\r\n        this.submittedModel = this.heroForm.value;\r\n      }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/app/updateOn/updateOn.component.ts","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n\n\n\n// WEBPACK FOOTER //\n// F:/angularTests/sampleApp/Angular-Forms/src/main.ts"],"sourceRoot":"webpack:///"}